    //        int erosion_size = 2;
    //        cv::Mat element = cv::getStructuringElement(cv::MORPH_ELLIPSE,
    //                                                    cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1),
    //                                                    cv::Point(erosion_size, erosion_size) );
    //        cv::erode(image_copy, image, element);
    
    //        int erosion_size = 2;
    //        cv::Mat element = cv::getStructuringElement(cv::MORPH_ELLIPSE,
    //                                                    cv::Size(2 * erosion_size + 1, 2 * erosion_size + 1),
    //                                                    cv::Point(erosion_size, erosion_size) );
    //        cv::dilate(image_copy, image, element);
    
//    Mat kern = (Mat_<float>(3,3) <<  0.8, 0, 0,
//                0, 0.8, 0,
//                0, 0, 0.8);
//    cv::transform(image_copy, image, kern);
    
//    Mat kern = (Mat_<float>(4, 4) <<  1.9, 0, 0, 0,
//                0, 1.9, 0, 0,
//                0, 0, 1.9, 0,
//                0, 0, 0, 1.9);
//    cv::transform(image_copy, image, kern);

//        Mat kern = (Mat_<float>(3,3) <<  0, -1,  0,
//                    -1,  5, -1,
//                    0, -1,  0);
//        filter2D(image_copy, image, image_copy.depth(), kern );

//        Mat kern = (Mat_<float>(4,4) <<  2, 0, 0, 0,
//                    0, 2, 0, 0,
//                    0, 0, 2, 0,
//                    0, 0, 0, 2);
//        cv::transform(image_copy, image, kern);
//        image += cv::Scalar(2, 2, 2, 0);

//        Mat kern = (Mat_<float>(4,4) <<  0.272, 0.534, 0.131, 0,
//                    0.349, 0.686, 0.168, 0,
//                    0.393, 0.769, 0.189, 0,
//                    0, 0, 0, 1);
//        cv::transform(image_copy, image, kern);

//        bitwise_not(image_copy, image_copy);
//        cvtColor(image_copy, image, CV_BGR2BGRA);

//        cvtColor(image_copy, image, CV_BGR2GRAY);

//        cvtColor(image_copy, image, CV_BGR2Luv);